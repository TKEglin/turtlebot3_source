#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

from turtle import right, speed
import rospy
import math
import time
import numpy
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist

LINEAR_VEL = 0.22
# Robot will start turning once obstacle is detected within this range
STOP_DISTANCE = 0.5
LIDAR_ERROR = 0.05
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR
PI = math.pi
SLEEP_TIME = 0.1
TOTAL_TURN_SPEED = 0.3 # Defines how fast the robot will move when it needs to turn

class Obstacle():
    def __init__(self):
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        self.obstacle()
        
    def get_scan(self):
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []
       
        samples = len(scan.ranges)  # The number of samples is defined in 
                                    # turtlebot3_<model>.gazebo.xacro file,
                                    # the default is 360.
        samples_view = 120          # 1 <= samples_view <= samples
        
        if samples_view > samples:
            samples_view = samples

        if samples_view is 1:
            scan_filter.append(scan.ranges[0])

        else:
            left_lidar_samples_ranges = -(samples_view//2 + samples_view % 2)
            right_lidar_samples_ranges = samples_view//2
            
            left_lidar_samples = scan.ranges[left_lidar_samples_ranges:]
            right_lidar_samples = scan.ranges[:right_lidar_samples_ranges]
            scan_filter.extend(left_lidar_samples + right_lidar_samples)

        for i in range(samples_view):
            if scan_filter[i] == float('Inf'):
                scan_filter[i] = 3.5
            elif math.isnan(scan_filter[i]):
                #If there is a read error, we take the value from the previous read
                scan_filter[i-1] = 0
        
        return scan_filter

    def obstacle(self):
        twist = Twist()
        turtlebot_moving = True #Not currently in use

        average_linear_speed = 0
        speed_accumulation = 0
        speed_updates = 0

        collision_counter = 0

        while not rospy.is_shutdown():
            # Optimization information #
            rospy.loginfo("Average linear speed: %f", average_linear_speed)
            rospy.loginfo("Collision counter: %f", collision_counter)

            lidar_distances = self.get_scan()
            min_distance    = min(lidar_distances)
            left_distance   = numpy.mean(lidar_distances[:40])
            center_distance = numpy.mean(lidar_distances[40:80])
            right_distance  = numpy.mean(lidar_distances[80:])

            remaining_angle = 0
            turn_direction = 1 # Decides which direction the bot turns

            if(center_distance < 0.05): #placeholder: less than 5 centimeters
                collision_counter += 1

            if center_distance < SAFE_STOP_DISTANCE:
                #Positive remaining angle = turn right
                remaining_angle = PI / 8

                if(left_distance < SAFE_STOP_DISTANCE and center_distance < SAFE_STOP_DISTANCE and right_distance < SAFE_STOP_DISTANCE):
                    # If there are obstacles on all sides, turn 180 degrees
                    remaining_angle = PI
                    turn_direction = 1
                elif (left_distance < SAFE_STOP_DISTANCE and center_distance < SAFE_STOP_DISTANCE):
                    # The closer the distance, the more the bot needs to turn.
                    # The default turning distance is 22 degrees ~= PI/8 times the distance
                    remaining_angle = PI/8 * (1 / (0.05 + min(center_distance, left_distance)))
                    turn_direction = 1
                elif right_distance < SAFE_STOP_DISTANCE and center_distance < SAFE_STOP_DISTANCE:
                    # If there is obstacle to the right, the bot turns left
                    remaining_angle = PI/8 * (1 / (0.05 + min(center_distance, right_distance)))
                    turn_direction = -1
                else:
                    # If no obstacle is detected ahead, continue straight
                    # While loop should terminate if this condition is true unless new obstacle is detected
                    remaining_angle = 0

                # IMPLEMENT: ratio of angular to linear velocity depends on remaining angle #
                #To avoid division by zero, we break and adjust speed if no turning is required
                if(remaining_angle <= 0): 
                    twist.linear.x = LINEAR_VEL
                    twist.angular.z = 0
                    self._cmd_pub.publish(twist)
                else:
                    # Smaller remaining angle means higher linear speed
                    current_linear_speed = TOTAL_TURN_SPEED  - TOTAL_TURN_SPEED * remaining_angle
                    # Higher remaining angle means more angular speed
                    current_angular_speed = (TOTAL_TURN_SPEED - current_linear_speed) * turn_direction #Positive if left, negative if right
                    twist.linear.x = current_linear_speed
                    twist.angular.z = current_angular_speed
                    self._cmd_pub.publish(twist)

                    turtlebot_moving = True
                    rospy.loginfo('Distance of obstacles : L = %f, C = %f, R = %f', left_distance, center_distance, right_distance)
                    rospy.loginfo('Obstacle! Turning.')

                    #Optimization data
                    speed_updates += 1
                    speed_accumulation += current_linear_speed
                    remaining_angle -= SLEEP_TIME * 0.15 #angular velocity = radians/second
                    time.sleep(SLEEP_TIME)

            else:
                twist.linear.x = LINEAR_VEL
                twist.angular.z = 0.0
                self._cmd_pub.publish(twist)
                turtlebot_moving = True
                rospy.loginfo('Distance of obstacles : L = %f, C = %f, R = %f', left_distance, center_distance, right_distance)

                speed_updates += 1
                speed_accumulation += LINEAR_VEL
                time.sleep(SLEEP_TIME)

            #We need to update this after, to avoid initial division by zero
            average_linear_speed = speed_accumulation / speed_updates
        
            if(rospy.is_shutdown()):
                



def main():
    rospy.init_node('turtlebot3_obstacle')
    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
